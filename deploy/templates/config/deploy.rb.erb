require 'deprec/recipes' if Capistrano::Version::MAJOR < 2

# =============================================================================
# ROLES
# =============================================================================
# You can define any number of roles, each of which contains any number of
# machines. Roles might include such things as :web, or :app, or :db, defining
# what the purpose of each machine is. You can also specify options that can
# be used to single out a specific subset of boxes in a particular role, like
# :primary => true.

set :domain, "<%= domain || "www.#{app_name || 'mynewsite'}.com" %>"
role :web, domain
role :app, domain
role :db,  domain, :primary => true
role :scm, domain

# =============================================================================
# REQUIRED VARIABLES
# =============================================================================
# You must always specify the application and repository for every recipe. The
# repository must be the URL of the repository you want this recipe to
# correspond to. The deploy_to path must be the path on each machine that will
# form the root of the application path.

set :application, "<%= app_name %>"
set :deploy_to, "/var/www/apps/#{application}"

# XXX we may not need this - it doesn't work on windows
set :user, "deploy"
set :scm_user, "drnic"
set :repository, "svn+ssh://#{scm_user}@#{domain}#{deploy_to}/repos/trunk"
#set :repository, "svn+ssh://#{scm_user}@drnicacademy.com.au/#{deploy_to}/repos/trunk"
set :rails_env, "production"

if Capistrano::Version::MAJOR < 2

  # Automatically symlink these directories from current/public to shared/public.
  # set :app_symlinks, %w{photo, document, asset}

  # =============================================================================
  # SPECIAL OPTIONS
  # =============================================================================
  # These options allow you to tweak deprec behaviour

  # If you do not keep database.yml in source control, set this to false.
  # After new code is deployed, deprec will symlink current/config/database.yml 
  # to shared/config/database.yml
  #
  # You can generate shared/config/database.yml with 'cap generate_database_yml'
  #
  set :database_yml_in_scm, false

  # =============================================================================
  # APACHE OPTIONS
  # =============================================================================
  set :apache_server_name, domain
  # set :apache_server_aliases, %w{alias1 alias2}
  # set :apache_default_vhost, true # force use of apache_default_vhost_config
  # set :apache_default_vhost_conf, "/usr/local/apache2/conf/default.conf"
  # set :apache_conf, "/usr/local/apache2/conf/apps/#{application}.conf"
  # set :apache_ctl, "/etc/init.d/httpd"
  set :apache_proxy_port, 8000
  set :apache_proxy_servers, 1
  # set :apache_proxy_address, "127.0.0.1"
  # set :apache_ssl_enabled, false
  # set :apache_ssl_ip, "127.0.0.1"
  # set :apache_ssl_forward_all, false
  # set :apache_ssl_chainfile, false


  # =============================================================================
  # MONGREL OPTIONS
  # =============================================================================
  # set :mongrel_servers, apache_proxy_servers
  # set :mongrel_port, apache_proxy_port
  set :mongrel_address, apache_proxy_address
  # set :mongrel_environment, "production"
  # set :mongrel_config, "/etc/mongrel_cluster/#{application}.conf"
  # set :mongrel_user_prefix,  'mongrel_'
  # set :mongrel_user, mongrel_user_prefix + application
  # set :mongrel_group_prefix,  'app_'
  # set :mongrel_group, mongrel_group_prefix + application

  # =============================================================================
  # MYSQL OPTIONS
  # =============================================================================


  # =============================================================================
  # SSH OPTIONS
  # =============================================================================
  # can put put in ~/.caprc
  # ssh_options[:keys] = %w(/Users/nicwilliams/.ssh/id_dsa)
  # ssh_options[:port] = 25

  task :before_update_code do
    if svn_config = YAML.load_file('config/svn.yml') rescue nil
      set :svn_username, svn_config["username"]
      set :svn_password, svn_config["password"]
    end
  end

  task :after_install_gems do
    gem.select  'hpricot'
    gem.install 'memcache-client'
    gem.select  'ruby-debug' # for console
    get.install 'ruby-openid'
  end

  desc "Remote console" 
  task :console, :roles => :app do
    input = ''
    run "cd #{current_path} && ruby script/console #{ENV['RAILS_ENV']}" do |channel, stream, data|
      next if data.chomp == input.chomp || data.chomp == ''
      print data
      channel.send_data(input = $stdin.gets) if data =~ /^(>|\?)>/
    end
  end

  desc "Checks if any changes that haven't been committed"
  task :check_uncommitted do
    svnstatus = `svn st`
    if svnstatus.strip.size > 0
      puts "\n ### There are uncommiitted changes! ### \n\n#{svnstatus}\n"
      print "Ok to proceed? [y/N] "
      proceed = STDIN.gets[0..0] rescue nil
      exit unless proceed == 'y' || proceed == 'Y'
    end
  end

  desc "Returns last lines of log file. Usage: cap log [-s lines=100] [-s rails_env=production]"
  task :log do
    lines     = configuration.variables[:lines] || 100
    rails_env = configuration.variables[:rails_env] || 'production'
    env   = ENV['RAILS_ENV'] || 'production'
    run "tail -n #{lines} #{deploy_to}/#{shared_dir}/log/#{rails_env}.log" do |ch, stream, out|
      puts out
    end
  end

  task :disable_web, :roles => :web, :except => { :no_release => true } do
    require 'erb'
    on_rollback { run "rm #{shared_path}/system/maintenance.html" }

    reason = ENV['REASON']
    deadline = ENV['UNTIL']

    template = File.read(File.join(File.dirname(__FILE__), "..", "app/views/layouts/maintenance.html.erb"))
    result = ERB.new(template).result(binding)

    put result, "#{shared_path}/system/maintenance.html", :mode => 0644
  end

  task :before_restart, :roles => :web do
    disable_web
  end

  task :after_restart, :roles => :web do
    enable_web
  end

  set :db_user, 'root'
  set :db_name, application

  desc "Dumps target database into development db"
  task :sync_db do
    env   = ENV['RAILS_ENV'] || ENV['DB'] || 'production'
    file  = "#{application}-#{Time.now.to_i}.sql.bz2"
    remote_file = "#{shared_path}/log/#{file}"
    backup_db
    puts rsync = "rsync -v --stats --progress #{user}@#{domain}:#{remote_file} tmp"
    `#{rsync}`
    puts depackage = "bzcat tmp/#{file} | mysql -uroot #{db_name}_development"
    `#{depackage}`
  end

  task :backup_db do
    env   = ENV['RAILS_ENV'] || ENV['DB'] || 'production'
    file  = "#{application}-#{Time.now.to_i}.sql.bz2"
    remote_file = "#{shared_path}/log/#{file}"
    run "mysqldump -u#{db_user} #{db_name}_#{env} | bzip2 > #{remote_file}" do |ch, stream, out|
      puts out
    end
  end

  desc "Dumps target database into development db"
  task :db_prod_to_staging, :env => :staging do
    puts "Not working yet" and exit
    env   = ENV['RAILS_ENV'] || ENV['DB'] || 'production'
    file  = "#{application}-#{Time.now.to_i}.sql.bz2"
    remote_file = "#{shared_path}/log/#{file}"
    backup_db
    rsync = "rsync -v --stats --progress #{user}@#{production}:#{remote_file} #{remote_file}"
    run rsync
    depackage = "bzcat tmp/#{file} | mysql -uroot #{db_name}_#{env}"
    run depackage
  end

  task :trac_config, :roles => :scm do
    deprec.render_template_to_file('trac.ini.erb', "#{trac_path}/conf/trac.ini", File.dirname(__FILE__) + "/trac")
  end

  # FIXME: needed to manually change group (to app_imindi for tmp/pids and config/database.yml) WHY?
  # and production.log -> 666
  # cap1 install_memcached
  # cap1 memcached_start
end
